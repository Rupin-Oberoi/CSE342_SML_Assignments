# -*- coding: utf-8 -*-
"""a3_q1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14y9aJoTJdwTGDXjVK_Yz8R5C-qlxC5yn
"""

import pickle
import matplotlib.pyplot as plt
import numpy as np
import sklearn
import cv2
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis

def unpickle(file):
    with open(file, 'rb') as fo:
        dict = pickle.load(fo, encoding='bytes')
    return dict

dict_test = unpickle('/test_batch')
dict1 = unpickle('/data_batch_1')
dict2 = unpickle('/data_batch_2')
dict3 = unpickle('/data_batch_3')
dict4 = unpickle('/data_batch_4')
dict5 = unpickle('/data_batch_5')

def rgb_separation(arr,i):
    col_arr = arr[i] #to get ith image
    len1 = len(col_arr)
    rarr, garr, barr = [], [],[]
    for i in range(int(len1/3)):
        rarr.append(col_arr[i])
    for i in range(int(len1/3), int(2*len1/3)):
        garr.append(col_arr[i])
    for i in range(int(2*len1/3), len1):
        barr.append(col_arr[i])
    return rarr, garr, barr

def rgb_unification(rarr1, garr1, barr1):
    image = []
    for i in range(len(rarr1)):
        image.append(rarr1[i])
        image.append(garr1[i])
        image.append(barr1[i])
    image = np.reshape(image,(32,32,3))
    return image

image_index_list = []
for i in range(10):
    image_index_list.append([])
for i in range(10):
    prev = 0
    for j in range(5):
        for k in range(prev+1, len(dict1[b'labels'])):
            if (dict1[b'labels'][k]==i):
                j+=1
                image_index_list[i].append(k)
                prev = k
                break

for i in range(10):
    for j in range(5):
        images = dict1[b'data']
        rarr0, garr0, barr0 = rgb_separation(images,image_index_list[i][j])
        image0 = rgb_unification(rarr0, garr0, barr0)
        plt.matshow(image0)
        plt.show()

x = np.concatenate((dict1[b'data'],dict2[b'data'],dict3[b'data'],dict4[b'data'],dict5[b'data']))
y = np.concatenate((dict1[b'labels'],dict2[b'labels'],dict3[b'labels'],dict4[b'labels'],dict5[b'labels']))
clf = LinearDiscriminantAnalysis()
clf.fit(x,y)
pred = (clf.predict(dict_test[b'data']))

correct=0
incorrect=0
for i in range(len(pred)):
  if (pred[i]==dict_test[b'labels'][i]):
    correct+=1
  else:
    incorrect+=1
print("Overall accuracy = "+str(correct*100/(correct+incorrect)))

for i in range(10):
  correct = 0
  incorrect = 0
  for j in range(len(pred)):
    if (dict_test[b'labels'][j] == i and pred[j]==dict_test[b'labels'][j]):
      correct+=1
    elif (dict_test[b'labels'][j] == i):
      incorrect+=1
  print("Accuracy of class "+str(i)+" = "+str(correct*100/(correct+incorrect)))