# -*- coding: utf-8 -*-
"""a3_q4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eYRBiBdGZLipURupTKnWEn3Dap4_DaZ9
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import sklearn
import csv
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
from sklearn.decomposition import PCA
!pip3 install idx2numpy
import idx2numpy

arr_img = idx2numpy.convert_from_file('/content/train-images.idx3-ubyte')
arr_labels = idx2numpy.convert_from_file('/content/train-labels.idx1-ubyte')
arr_img = np.reshape(arr_img, (60000, 784))

pca15 = PCA(n_components=15)
pca15.fit(arr_img)

arr_trans = pca15.transform(arr_img)
print((arr_trans[0]))

classwise = []
for i in range(len(np.unique(arr_labels))):
  mid = []
  for j in range(len(arr_labels)):
    if (arr_labels[j]==i):
      mid.append(list((arr_trans[j])))
  classwise.append(mid)

#global variables for better readability
num_class = len(classwise)
num_pixels = len(classwise[0][0])

means = []
for i in range(num_class):
  means.append(np.mean(classwise[i], axis = 0))

wscatters = []
for i in range(num_class):
  sum = [[0]*num_pixels for j in range(num_pixels)]
  for j in range(len(classwise[i])):
    sum+= np.matmul(np.transpose(means[i] - classwise[i][j]),means[i] - classwise[i][j])
  wscatters.append(sum)

sw = wscatters[0]
for i in range(1, num_class):
  sw+=wscatters[i]

big_mean = np.mean(arr_trans, axis=0)

sb = [[0]*num_pixels for i in range(num_pixels)]
for i in range(num_class):
  sb+=len(classwise[i])*np.matmul(np.transpose(means[i]-big_mean),means[i]-big_mean)

mat = np.matmul(np.linalg.pinv(sw),sb)

val, vec = np.linalg.eigh(mat)
idx = val.argsort()[-1:][::-1]
val = val[idx]
vec = vec[idx]
w = vec

y = []
for xi in arr_trans:
  xi = np.transpose(xi)
  xi = np.asarray(xi, dtype='float64')
  y.append(np.transpose((np.matmul(w, xi))))

test_labels = idx2numpy.convert_from_file('/content/t10k-labels.idx1-ubyte')

x_test = idx2numpy.convert_from_file('/content/t10k-images.idx3-ubyte')
x_test = np.reshape(x_test, (10000, 784))
y_test = []
x_test = pca15.transform(x_test)
for xi in x_test:
  xi = np.transpose(xi)
  xi = np.asarray(xi, dtype='float64')
  y_test.append(np.transpose(np.matmul(w, xi)))

clf = LDA()
clf.fit(y, arr_labels)

pred = clf.predict(y_test)

correct = 0
incorrect = 0
for i in range(len(pred)):
  if (pred[i]==test_labels[i]):
    correct+=1
  else:
    incorrect+=1
print("Accuracy = "+ str(correct*100/(correct+incorrect)))

for i in range(num_class):
  correct = 0
  incorrect = 0
  for j in range(len(pred)):
    if (test_labels[j] == i and pred[j]==test_labels[j]):
      correct+=1
    elif (test_labels[j] == i):
      incorrect+=1
  print("Accuracy of class "+str(i)+" = "+str(correct*100/(correct+incorrect)))