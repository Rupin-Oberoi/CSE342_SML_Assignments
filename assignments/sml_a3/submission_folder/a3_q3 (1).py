# -*- coding: utf-8 -*-
"""a3_q3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1njuuS2JiBo557Z9742fUJ24v46oHd8l6
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import sklearn
import csv
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA

labels = []
with open('/content/fashion-mnist_train.csv', newline = '') as f:
  reader = csv.reader(f)
  rows = list(reader)
  del rows[:1]
  rows = np.array(rows)
  for row in rows:
    labels.append(int(row[0]))

x= []
for row in rows:
  x.append(row[1:])

classwise = []
for i in range(len(np.unique(labels))):
  mid = []
  for j in range(len(labels)):
    if (labels[j]==i):
      mid.append(list(map(int, rows[j][1:])))
  classwise.append(mid)
classwise = np.array(classwise)

#global variables
num_pixel = len(rows[0])-1
num_class = len(classwise)

means = []
for i in range(num_class):
  means.append(np.mean(classwise[i], axis=0))

print(np.shape(classwise[9]))

wscatters = [] #within class scatters
for i in range(num_class):
  sum = [[0]*num_pixel for j in range(num_pixel)]
  for j in range(len(classwise[i])):
    print(str(i), str(j))
    sum+=np.matmul(np.transpose(classwise[i][j]- means[i]), classwise[i][j]- means[i])
  wscatters.append(sum)

sw = wscatters[0]
for i in range(1,8):
  sw+=wscatters[i]

big_mean = np.mean(classwise, axis=(0,1))

sb = [[0]*num_pixel for i in range(num_pixel)]
for i in range(num_class):
  sb+=len(classwise[i])*np.matmul(np.transpose(means[i]-big_mean),means[i]-big_mean)

mat = np.matmul(np.linalg.pinv(sw),sb)

val, vec = np.linalg.eigh(mat)
idx = val.argsort()[-10:][::-1]
val = val[idx]
vec = vec[idx]
w = vec

y = []
for xi in x:
  xi = np.transpose(xi)
  xi = np.asarray(xi, dtype='float64')
  y.append(np.transpose((np.matmul(w, xi))))

test_labels = []
with open('/content/fashion-mnist_test.csv', newline = '') as f:
  reader = csv.reader(f)
  rows = list(reader)
  del rows[:1]
  rows = np.array(rows)
  for row in rows:
    test_labels.append(int(row[0]))

x_test= []
for row in rows:
  x_test.append(row[1:])
y_test = []
for xi in x_test:
  xi = np.transpose(xi)
  xi = np.asarray(xi, dtype='float64')
  y_test.append(np.transpose(np.matmul(w, xi)))

clf = LDA()
clf.fit(y, labels)

pred = clf.predict(y_test)

correct = 0
incorrect = 0
for i in range(len(pred)):
  if (pred[i]==test_labels[i]):
    correct+=1
  else:
    incorrect+=1
print("Accuracy = "+ str(correct*100/(correct+incorrect)))

for i in range(num_class):
  correct = 0
  incorrect = 0
  for j in range(len(pred)):
    if (test_labels[j] == i and pred[j]==test_labels[j]):
      correct+=1
    elif (test_labels[j] == i):
      incorrect+=1
  print("Accuracy of class "+str(i)+" = "+str(correct*100/(correct+incorrect)))